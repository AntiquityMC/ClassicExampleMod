plugins {
	id 'fabric-loom' version '1.12.0-alpha.15'
	id 'maven-publish'
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	clientOnlyMinecraftJar()
	noIntermediateMappings()

	runs {
		client {
			// Needed for https://github.com/FabricMC/fabric-loader/issues/712
			property 'fabric.gameVersion', '0.30'
		}
	}
}

repositories {
	// Add repository for PL constants.
	exclusiveContent {
		forRepository {
			ivy {
				url = 'https://github.com/AntiquityMC/PotentialLamp/releases/download'
				patternLayout {
					artifact("[revision]/[artifact].[ext]")
				}
				metadataSources {
					artifact()
				}
			}
		}

		filter {
			includeGroup 'io.github.antiquitymc.potential-lamp'
		}
	}

	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		it.mappings("https://github.com/AntiquityMC/PotentialLamp/releases/download/${project.pl_mappings}/obfToNamed.jar") {
			it.containsUnpick()
		}
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 0.30 uses Java 5, but we need Java 8 for Fabric.
	it.options.release = 8
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archiveBaseName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
